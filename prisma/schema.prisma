// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

enum Role {
    user
    moderator
    admin
}

model User {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @map("created_at")

    email        String        @unique
    password     String
    name         String
    publicEmail  Boolean       @default(false) @map("public_email")
    publicName   Boolean       @default(true) @map("public_name")
    role         Role          @default(user)
    verified     Boolean       @default(false)
    posts        Post[]
    comments     Comment[]
    postVotes    PostVote[]
    commentVotes CommentVote[]

    @@map("users")
}

model Post {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @unique @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime @updatedAt @map("updated_at")

    title String
    body  String
    draft Boolean

    userId   String     @map("user_id") @db.Uuid
    user     User       @relation(fields: [userId], references: [id])
    comments Comment[]
    votes    PostVote[]

    @@map("posts")
}

model Comment {
    id String @id @default(uuid()) @db.Uuid

    createdAt DateTime @unique @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt DateTime @updatedAt @map("updated_at")

    body  String
    draft Boolean

    postId String @map("post_id") @db.Uuid
    post   Post   @relation(fields: [postId], references: [id])

    userId String        @map("user_id") @db.Uuid
    user   User          @relation(fields: [userId], references: [id])
    votes  CommentVote[]

    @@map("comments")
}

model PostVote {
    userId String @map("user_id") @db.Uuid
    postId String @map("post_id") @db.Uuid

    positive Boolean

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@id([userId, postId])
    @@map("posts_votes")
}

model CommentVote {
    userId    String @map("user_id") @db.Uuid
    commentId String @map("comment_id") @db.Uuid

    positive Boolean

    user    User    @relation(fields: [userId], references: [id])
    comment Comment @relation(fields: [commentId], references: [id])

    @@id([userId, commentId])
    @@map("comments_votes")
}
