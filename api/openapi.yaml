openapi: 3.1.0
info:
  title: Microblog API
  description: The OpenAPI spec for the Microblog service
  version: 0.1.0
  contact:
    name: Kevin Del Castillo
    email: kevindelcastillo@ravn.co
servers:
  - url: 'http://localhost/api/v1'
tags:
  - name: Accounts
    description: Endpoints related to auth and accounts
  - name: Posts
    description: Endpoints related to posts
security:
  - bearerAuth: [ ]
components:
  securitySchemes:
    bearerAuth:
      description: Authorization with a Json Web Token (obtained after signing in/up)
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    AuthRequest:
      $ref: "./models/accounts.yaml#/AuthRequest"
    SignUpAuthRequest:
      $ref: "./models/accounts.yaml#/SignUpAuthRequest"
    AuthResponse:
      $ref: "./models/accounts.yaml#/AuthResponse"
    AccountInfoResponse:
      $ref: "./models/accounts.yaml#/AccountInfoResponse"
    AccountInfoUpdate:
      $ref: "./models/accounts.yaml#/AccountInfoUpdate"
    VerifyEmailRequest:
      $ref: "./models/accounts.yaml#/VerifyEmailRequest"

    PostsResponse:
      $ref: "./models/posts.yaml#/PostsResponse"
    NewPostRequest:
      $ref: "./models/posts.yaml#/NewPostRequest"
    PostResponse:
      $ref: "./models/posts.yaml#/Post"
    PostUpdate:
      $ref: "./models/posts.yaml#/PostUpdate"

    CommentsResponse:
      $ref: "./models/comments.yaml#/CommentsResponse"
    NewCommentRequest:
      $ref: "./models/comments.yaml#/NewCommentRequest"
    CommentResponse:
      $ref: "./models/comments.yaml#/Comment"
    CommentUpdate:
      $ref: "./models/comments.yaml#/CommentUpdate"
paths:
  /accounts/sign-up:
    post:
      summary: Sign up with a new account
      tags:
        - Accounts
      operationId: signUp
      security: [ ]
      requestBody:
        description: New account information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpAuthRequest"
      responses:
        201:
          description: Account was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /accounts/sign-in:
    post:
      summary: Sign in with an existent account
      tags:
        - Accounts
      operationId: signIn
      security: [ ]
      requestBody:
        description: Account credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        200:
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /accounts/verify-email:
    post:
      summary: Verify account email
      tags:
        - Accounts
      operationId: verifyEmail
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailRequest"
      responses:
        204:
          description: The email was successfully verified

  /accounts/{id}:
    summary: Operations for a specific account
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: Get account information
      description: |
        Returns the account information that matches the given id, _only_ verified accounts will be
        returned.
      tags:
        - Accounts
      operationId: getAccountInformation
      security: [ ]
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountInfoResponse"
    patch:
      summary: Update account information
      tags:
        - Accounts
      requestBody:
        description: Values to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountInfoUpdate"
      responses:
        200:
          description: Account information was successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountInfoResponse"

  /posts:
    summary: Operations for posts
    get:
      summary: Get all posts
      tags:
        - Posts
      operationId: getPosts
      security: [ ]
      parameters:
        - name: sort
          in: query
          required: false
          description: Sort order (by creation time)
          schema:
            type: string
            enum: [ desc, asc ]
            default: desc
        - name: cursor
          in: query
          required: false
          description: Cursor from where the new list will start
          schema:
            type: string
            format: date-time
        - name: take
          in: query
          required: false
          description: How many posts to return
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 30
        - name: user
          in: query
          required: false
          description: |
            Filter by a specific user, can receive a `<uuid>` or the special value `self` to filter for the 
            authenticated user. Will return all posts if no value is provided.
          schema:
            type: string
            enum: [ <uuid>, self ]
        - name: include
          in: query
          required: false
          description: |
            Which posts to include, by default will include `all` posts, though, drafts will only be included when
            filtering for the current user (i.e. `user=self`). The value `all` is an alias for `published,drafts`.
          style: form
          explode: false
          schema:
            type: array
            default: [ all ]
            uniqueItems: true
            items:
              type: string
              enum: [ all, published, drafts ]
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostsResponse"
    post:
      summary: Create a new post
      tags:
        - Posts
      operationId: createPost
      requestBody:
        description: Post data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPostRequest"
      responses:
        201:
          description: Post was created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponse"

  /posts/{id}:
    summary: Operations for a specific post
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: Get post information
      description: |
        Returns a post information. Authorization is optional, though, posts that haven't been published yet won't be 
        accessible without a valid access token from the owner.
      tags:
        - Posts
      operationId: getPost
      responses:
        200:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponse"
    patch:
      summary: Update a post
      description: |
        Update a post to either change its contents or to publish it (if it's a draft).
      tags:
        - Posts
      operationId: updatePost
      requestBody:
        description: Update post data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostUpdate"
      responses:
        200:
          description: Successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponse"
    delete:
      summary: Delete a post
      description: |
        Delete a post, only the owner of a post or moderators and admins can delete a post.
      tags:
        - Posts
      operationId: deletePost
      responses:
        204:
          description: Post was successfully deleted.

  /comments:
    summary: Operations for comments
    get:
      summary: Get all comments
      tags:
        - Comments
      operationId: getComments
      description: |
        Returns all the comments for a given `post` id, and/or `user` id (at least one of them must be set).
      parameters:
        - name: sort
          in: query
          required: false
          description: Sort order (by creation time)
          schema:
            type: string
            enum: [ desc, asc ]
            default: desc
        - name: cursor
          in: query
          required: false
          description: Cursor from where the new list will start
          schema:
            type: string
            format: uuid
        - name: take
          in: query
          required: false
          description: How many comments to return
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 30
        - name: post
          in: query
          required: false
          description: |
            Filter by a specific post. Can be used with `user`, and at least one of them must be set.
          schema:
            type: string
            format: uuid
        - name: user
          in: query
          required: false
          description: |
            Filter by a specific user, can receive a `<uuid>` or the special value `self` to filter for the
            authenticated user. Can be used with `post`, and at least one of them must be set.
          schema:
            type: string
            enum: [ <uuid>, self ]
        - name: include
          in: query
          required: false
          description: |
            Which comments to include, by default will include `all` published comments. Drafts will only be included 
            when filtering for the current user (i.e. `user=self`). The value `all` is an alias for `published,drafts`.
          style: form
          explode: false
          schema:
            type: array
            default: [ all ]
            uniqueItems: true
            items:
              type: string
              enum: [ all, published, drafts ]
      responses:
        200:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentsResponse"
    post:
      summary: Create a new comment
      tags:
        - Comments
      operationId: createComment
      requestBody:
        description: Comment data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCommentRequest"
      responses:
        201:
          description: Comment successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"

  /comments/{id}:
    summary: Operations for a specific comment
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: Get comment information
      description: |
        Returns a comment information. Authorization is optional, though, comments that haven't been published yet won't
        be accessible without a valid access token from the owner.
      tags:
        - Comments
      operationId: getComment
      responses:
        200:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
    patch:
      summary: Update a comment
      description: |
        Update a comment to either change its contents or to publish it (if it's a draft).
      tags:
        - Comments
      operationId: updateComment
      requestBody:
        description: Update comment data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentUpdate"
      responses:
        200:
          description: Successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
    delete:
      summary: Delete a comment
      description: |
        Delete a comment, only the owner of a post or moderators and admins can delete a comment.
      tags:
        - Comments
      operationId: deleteComment
      responses:
        204:
          description: Comment was successfully deleted.
